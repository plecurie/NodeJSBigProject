stages:
  - test
  - build
  - release
  - deploy

variables:
  STAGING_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  PRODUCTION_IMAGE: $CI_REGISTRY_IMAGE:latest
  IMAGE_TAG: ${CI_COMMIT_REF_SLUG}

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

test:
  stage: test
  image: node:alpine
  tags:
    - typescript
    - tslint
  script:
    - npm install
    - npm run build
    - tslint -c tslint.json index.ts
    - npm run test
  artifacts:
    paths:
      - dist/

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - apk add --update libffi-dev openssl-dev python-dev gcc g++ make python py-pip && pip install cffi docker-compose
    - docker-compose build
    - docker tag scala-api_app:latest $STAGING_IMAGE
    - docker push $STAGING_IMAGE

deploy_staging:
  stage: deploy
  image: gitlab/dind:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_STAGING_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $H_STAGING >> ~/.ssh/known_hosts
  script:
    - sshpass -V
    - export SSHPASS=$SSH_PASS
    - sshpass -e ssh deployer@$H_STAGING "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    - sshpass -e ssh deployer@$H_STAGING "docker stop ${IMAGE_TAG}" || true
    - sshpass -e ssh deployer@$H_STAGING "docker rm ${IMAGE_TAG}" || true
    - sshpass -e ssh deployer@$H_STAGING "docker rmi -f ${STAGING_IMAGE}" || true
    - sshpass -e ssh deployer@$H_STAGING "docker run --publish=3100:3100 -d ${STAGING_IMAGE}"
    - rm -f ~/.ssh/id_rsa
    - 'echo Staging done: $(date “+%F %H:%M:%S”)'
  tags:
    - deploy
    - staging
  environment:
    name: Staging
    url: http://51.91.109.146:3111
  only:
    - master
    - dev

release:
  stage: release
  image: gitlab/dind:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_STAGING_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $H_STAGING >> ~/.ssh/known_hosts
  script:
    - sshpass -V
    - export SSHPASS=$SSH_PASS
    - sshpass -e ssh deployer@$H_STAGING "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    - sshpass -e ssh deployer@$H_STAGING "docker stop ${IMAGE_TAG}" || true
    - sshpass -e ssh deployer@$H_STAGING "docker rm ${IMAGE_TAG}" || true
    - sshpass -e ssh deployer@$H_STAGING "docker rmi -f ${STAGING_IMAGE}" || true
    - sshpass -e ssh deployer@$H_STAGING "docker run --publish=3100:3100 -d ${STAGING_IMAGE}"
    - rm -f ~/.ssh/id_rsa
    - 'echo Staging done: $(date “+%F %H:%M:%S”)'
  when: manual
  only:
    - master

deploy_production:
  stage: deploy
  image: node:latest
  tags:
    - deploy
    - production
  environment:
    name: Production
    url: https://gitlab.scala-patrimoine.fr:3100
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRODCTION_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $H_PROD >> ~/.ssh/known_hosts
  script:
    - sshpass -V
    - export SSHPASS=$SSH_PASS
    - sshpass -e ssh gitlab-runner@$H_PROD "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    - sshpass -e ssh gitlab-runner@$H_PROD "docker stop ${IMAGE_TAG}" || true
    - sshpass -e ssh gitlab-runner@$H_PROD "docker rm ${IMAGE_TAG}" || true
    - sshpass -e ssh gitlab-runner@$H_PROD "docker rmi -f ${PRODUCTION_IMAGE}" || true
    - sshpass -e ssh gitlab-runner@$H_PROD "docker run --publish=3100:3100 -d ${PRODUCTION_IMAGE}"
    - rm -f ~/.ssh/id_rsa
    - 'echo Deploy done: $(date “+%F %H:%M:%S”)'
  needs:
    - job: release
  when: manual
  only:
    - master

